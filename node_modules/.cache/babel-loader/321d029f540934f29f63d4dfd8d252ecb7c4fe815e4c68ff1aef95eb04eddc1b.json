{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { ref, onValue, set, remove } from 'firebase/database';\nimport { database, dataPath } from '../firebaseConfig';\nexport const useFirebase = () => {\n  _s();\n  const [data, setData] = useState({\n    title: '🏢 Painel de Funcionários',\n    subtitle: 'Arraste e solte os funcionários nos departamentos',\n    employeeCounter: 0,\n    employees: [],\n    departments: []\n  });\n  const [status, setStatus] = useState({\n    message: 'Conectando ao Firebase...',\n    type: 'connecting',\n    isConnected: false\n  });\n  const [isSaving, setIsSaving] = useState(false);\n  const updateStatus = useCallback((message, type) => {\n    setStatus({\n      message,\n      type,\n      isConnected: type === 'connected'\n    });\n  }, []);\n\n  // Função para testar conexão\n  const testConnection = useCallback(() => {\n    if (!database) {\n      updateStatus('Firebase não inicializado. Verifique a configuração.', 'error');\n      return;\n    }\n    updateStatus('Testando conexão...', 'connecting');\n    const connectedRef = ref(database, '.info/connected');\n    onValue(connectedRef, snapshot => {\n      if (snapshot.val() === true) {\n        updateStatus('Conexão com Firebase OK!', 'connected');\n      } else {\n        updateStatus('Sem conexão com Firebase', 'error');\n      }\n    }, error => {\n      console.error('Erro ao testar conexão:', error);\n      updateStatus('Erro de conexão: ' + error.message, 'error');\n    });\n  }, [updateStatus]);\n\n  // Função para salvar dados\n  const saveData = useCallback(async newData => {\n    if (isSaving || !database || !status.isConnected) {\n      console.log('Não é possível salvar:', {\n        isSaving,\n        hasDb: !!database,\n        isConnected: status.isConnected\n      });\n      return;\n    }\n    setIsSaving(true);\n    updateStatus('Salvando dados...', 'connecting');\n    try {\n      const dataRef = ref(database, dataPath);\n      await set(dataRef, newData);\n      console.log('Dados salvos com sucesso no Firebase');\n      updateStatus('Dados salvos com sucesso!', 'connected');\n    } catch (error) {\n      console.error('Erro ao salvar dados:', error);\n      updateStatus('Erro ao salvar: ' + error.message, 'error');\n      if (error.code === 'PERMISSION_DENIED') {\n        updateStatus('ERRO: Sem permissão para salvar. Verifique as regras do Firebase.', 'error');\n      }\n    } finally {\n      setIsSaving(false);\n    }\n  }, [isSaving, database, status.isConnected, updateStatus]);\n\n  // Função para resetar dados\n  const resetData = useCallback(async () => {\n    if (!database || !status.isConnected) return;\n    try {\n      const dataRef = ref(database, dataPath);\n      await remove(dataRef);\n      updateStatus('Dados resetados com sucesso!', 'connected');\n    } catch (error) {\n      updateStatus('Erro ao resetar: ' + error.message, 'error');\n    }\n  }, [database, status.isConnected, updateStatus]);\n\n  // Listener para mudanças em tempo real\n  useEffect(() => {\n    if (!database) return;\n    const dataRef = ref(database, dataPath);\n    const unsubscribe = onValue(dataRef, snapshot => {\n      try {\n        if (snapshot.exists()) {\n          const firebaseData = snapshot.val();\n          // Garantir que arrays existam\n          if (!firebaseData.employees) firebaseData.employees = [];\n          if (!firebaseData.departments) firebaseData.departments = [];\n          setData(firebaseData);\n          console.log('Dados carregados do Firebase:', firebaseData);\n          updateStatus('Dados sincronizados com Firebase', 'connected');\n        } else {\n          console.log('Nenhum dado encontrado no Firebase');\n          updateStatus('Nenhum dado encontrado no Firebase', 'connected');\n        }\n      } catch (error) {\n        console.error('Erro ao processar dados do Firebase:', error);\n        updateStatus('Erro ao processar dados: ' + error.message, 'error');\n      }\n    }, error => {\n      console.error('Erro no listener do Firebase:', error);\n      updateStatus('Erro de permissão: ' + error.message, 'error');\n      if (error.code === 'PERMISSION_DENIED') {\n        updateStatus('ERRO: Permissão negada. Verifique as regras do Firebase.', 'error');\n      }\n    });\n    return () => unsubscribe();\n  }, [updateStatus]);\n\n  // Inicialização\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      testConnection();\n    }, 1000);\n    return () => clearTimeout(timer);\n  }, [testConnection]);\n  return {\n    data,\n    setData,\n    status,\n    saveData,\n    resetData,\n    testConnection,\n    isSaving\n  };\n};\n_s(useFirebase, \"c/9XcfuUZGzmJERjV/VoCt14JEA=\");","map":{"version":3,"names":["useState","useEffect","useCallback","ref","onValue","set","remove","database","dataPath","useFirebase","_s","data","setData","title","subtitle","employeeCounter","employees","departments","status","setStatus","message","type","isConnected","isSaving","setIsSaving","updateStatus","testConnection","connectedRef","snapshot","val","error","console","saveData","newData","log","hasDb","dataRef","code","resetData","unsubscribe","exists","firebaseData","timer","setTimeout","clearTimeout"],"sources":["/workspace/src/hooks/useFirebase.js"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport { ref, onValue, set, remove } from 'firebase/database';\nimport { database, dataPath } from '../firebaseConfig';\n\nexport const useFirebase = () => {\n  const [data, setData] = useState({\n    title: '🏢 Painel de Funcionários',\n    subtitle: 'Arraste e solte os funcionários nos departamentos',\n    employeeCounter: 0,\n    employees: [],\n    departments: []\n  });\n\n  const [status, setStatus] = useState({\n    message: 'Conectando ao Firebase...',\n    type: 'connecting',\n    isConnected: false\n  });\n\n  const [isSaving, setIsSaving] = useState(false);\n\n  const updateStatus = useCallback((message, type) => {\n    setStatus({\n      message,\n      type,\n      isConnected: type === 'connected'\n    });\n  }, []);\n\n  // Função para testar conexão\n  const testConnection = useCallback(() => {\n    if (!database) {\n      updateStatus('Firebase não inicializado. Verifique a configuração.', 'error');\n      return;\n    }\n    \n    updateStatus('Testando conexão...', 'connecting');\n    \n    const connectedRef = ref(database, '.info/connected');\n    onValue(connectedRef, (snapshot) => {\n      if (snapshot.val() === true) {\n        updateStatus('Conexão com Firebase OK!', 'connected');\n      } else {\n        updateStatus('Sem conexão com Firebase', 'error');\n      }\n    }, (error) => {\n      console.error('Erro ao testar conexão:', error);\n      updateStatus('Erro de conexão: ' + error.message, 'error');\n    });\n  }, [updateStatus]);\n\n  // Função para salvar dados\n  const saveData = useCallback(async (newData) => {\n    if (isSaving || !database || !status.isConnected) {\n      console.log('Não é possível salvar:', { \n        isSaving, \n        hasDb: !!database, \n        isConnected: status.isConnected \n      });\n      return;\n    }\n    \n    setIsSaving(true);\n    updateStatus('Salvando dados...', 'connecting');\n    \n    try {\n      const dataRef = ref(database, dataPath);\n      await set(dataRef, newData);\n      console.log('Dados salvos com sucesso no Firebase');\n      updateStatus('Dados salvos com sucesso!', 'connected');\n    } catch (error) {\n      console.error('Erro ao salvar dados:', error);\n      updateStatus('Erro ao salvar: ' + error.message, 'error');\n      \n      if (error.code === 'PERMISSION_DENIED') {\n        updateStatus('ERRO: Sem permissão para salvar. Verifique as regras do Firebase.', 'error');\n      }\n    } finally {\n      setIsSaving(false);\n    }\n  }, [isSaving, database, status.isConnected, updateStatus]);\n\n  // Função para resetar dados\n  const resetData = useCallback(async () => {\n    if (!database || !status.isConnected) return;\n    \n    try {\n      const dataRef = ref(database, dataPath);\n      await remove(dataRef);\n      updateStatus('Dados resetados com sucesso!', 'connected');\n    } catch (error) {\n      updateStatus('Erro ao resetar: ' + error.message, 'error');\n    }\n  }, [database, status.isConnected, updateStatus]);\n\n  // Listener para mudanças em tempo real\n  useEffect(() => {\n    if (!database) return;\n    \n    const dataRef = ref(database, dataPath);\n    \n    const unsubscribe = onValue(dataRef, (snapshot) => {\n      try {\n        if (snapshot.exists()) {\n          const firebaseData = snapshot.val();\n          // Garantir que arrays existam\n          if (!firebaseData.employees) firebaseData.employees = [];\n          if (!firebaseData.departments) firebaseData.departments = [];\n          \n          setData(firebaseData);\n          console.log('Dados carregados do Firebase:', firebaseData);\n          updateStatus('Dados sincronizados com Firebase', 'connected');\n        } else {\n          console.log('Nenhum dado encontrado no Firebase');\n          updateStatus('Nenhum dado encontrado no Firebase', 'connected');\n        }\n      } catch (error) {\n        console.error('Erro ao processar dados do Firebase:', error);\n        updateStatus('Erro ao processar dados: ' + error.message, 'error');\n      }\n    }, (error) => {\n      console.error('Erro no listener do Firebase:', error);\n      updateStatus('Erro de permissão: ' + error.message, 'error');\n      \n      if (error.code === 'PERMISSION_DENIED') {\n        updateStatus('ERRO: Permissão negada. Verifique as regras do Firebase.', 'error');\n      }\n    });\n\n    return () => unsubscribe();\n  }, [updateStatus]);\n\n  // Inicialização\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      testConnection();\n    }, 1000);\n\n    return () => clearTimeout(timer);\n  }, [testConnection]);\n\n  return {\n    data,\n    setData,\n    status,\n    saveData,\n    resetData,\n    testConnection,\n    isSaving\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}